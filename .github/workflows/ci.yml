name: CI

on:
  workflow_call:
    secrets:
      PAT_TOKEN:
        required: false

jobs:
  ci:
    runs-on: [self-hosted, linux, x64]
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
      YARN_NPM_AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - run: yarn install --immutable
      - run: yarn lint
      - run: yarn tsc --noEmit

      - name: Run tests for packages that have them
        run: |
          echo "🧪 Running tests for packages with test scripts..."

          # Function to run tests if package has test script
          run_tests_if_exists() {
            local package_path="$1"
            local package_name="$2"

            if [ -f "$package_path/package.json" ]; then
              if grep -q '"test":' "$package_path/package.json"; then
                echo "✅ Running tests for $package_name..."
                if [ -f "yarn.lock" ]; then
                  # Monorepo: use workspace command
                  yarn workspace "$package_name" test
                else
                  # Single repo: run in package directory
                  (cd "$package_path" && yarn test)
                fi
              else
                echo "⏭️  No tests found for $package_name"
              fi
            fi
          }

          # Check for different project structures
          if [ -f "yarn.lock" ] && grep -q '"workspaces":' package.json 2>/dev/null; then
            echo "📦 Detected monorepo structure"

            # Dynamically find all packages and run their tests
            if [ -d "packages" ]; then
              for package_dir in packages/*/; do
                # Remove trailing slash for cleaner path handling
                package_dir=${package_dir%/}
                if [ -f "${package_dir}/package.json" ]; then
                  # Extract the package name from package.json
                  package_name=$(node -p "require('./${package_dir}/package.json').name" 2>/dev/null || echo "")
                  if [ -n "$package_name" ]; then
                    run_tests_if_exists "$package_dir" "$package_name"
                  else
                    echo "⚠️  Could not determine package name for ${package_dir}"
                  fi
                fi
              done
            else
              echo "⏭️  No packages directory found"
            fi
          else
            echo "📄 Detected single package structure"
            # For single packages like kivo, check if root has tests
            if grep -q '"test":' package.json 2>/dev/null; then
              echo "✅ Running tests for root package..."
              yarn test
            else
              echo "⏭️  No tests found in root package"
            fi
          fi

          echo "🎉 Test execution completed!"