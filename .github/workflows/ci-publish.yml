name: Publish (manual)

on:
  workflow_dispatch:

jobs:
  ci:
    name: Reuse CI
    uses: ./.github/workflows/ci.yml

  publish:
    name: Publish Packages
    needs: ci
    runs-on: ubuntu-latest
    concurrency:
      group: publish-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write
      actions: read
      packages: write
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
      YARN_NPM_AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://npm.pkg.github.com

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Derive next version from existing tags
        id: version
        run: |
          set -euo pipefail
          git fetch --tags --force || true
          # Get latest tag matching v*; if none, fall back to root package.json version
          LAST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Last tag: $LAST_TAG"
            BASE=${LAST_TAG#v}
          else
            BASE=$(node -p "require('./package.json').version")
            echo "No tag found. Using root version: $BASE"
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
          PATCH=$((PATCH+1))
          NEXT="${MAJOR}.${MINOR}.${PATCH}"
          # Ensure tag uniqueness by incrementing patch until an unused tag is found
          while git rev-parse -q --verify "refs/tags/v${NEXT}" >/dev/null; do
            PATCH=$((PATCH+1))
            NEXT="${MAJOR}.${MINOR}.${PATCH}"
          done
          echo "next=${NEXT}" >> "$GITHUB_OUTPUT"

      - name: Build
        run: yarn build

      - name: Bump versions across workspaces
        run: |
          set -euo pipefail
          VERSION=${{ steps.version.outputs.next }}
          echo "Publishing version ${VERSION}"
          # Ensure PAT_TOKEN is available for any registry operations
          if [ -z "${PAT_TOKEN:-}" ]; then
            echo "PAT_TOKEN is not set. Please configure secrets.PAT_TOKEN" >&2
            exit 1
          fi
          # Bump root version
          npm version "${VERSION}" --no-git-tag-version
          # Bump each workspace version
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              (cd "$pkg" && npm version "${VERSION}" --no-git-tag-version)
            fi
          done

      - name: Update lockfile after version bump
        run: |
          # Refresh Yarn lockfile to reflect updated versions
          YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install --mode=update-lockfile

      - name: Commit and push version bumps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          VERSION=${{ steps.version.outputs.next }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@noreply.github.com"
          git add -A
          git commit -m "chore(release): ${VERSION}" || echo "Nothing to commit"
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git push origin "HEAD:${CURRENT_BRANCH}"

      - name: Publish workspaces to GitHub Packages (topological)
        run: |
          set -euo pipefail
          if [ -z "${PAT_TOKEN:-}" ]; then
            echo "PAT_TOKEN is not set. Please configure secrets.PAT_TOKEN" >&2
            exit 1
          fi
          # Publish all non-private workspaces in dependency order
          yarn workspaces foreach -A --no-private --topological exec yarn npm publish --tolerate-republish

      - name: Create and push tag for this release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          VERSION=${{ steps.version.outputs.next }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@noreply.github.com"
          git tag v"${VERSION}"
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git push origin v"${VERSION}"


